
R version 3.1.3 (2015-03-09) -- "Smooth Sidewalk"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Coincide"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('Coincide')
Loading required package: ggplot2
Loading required package: impute
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:stats’:

    xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, as.vector, cbind, colnames, do.call, duplicated,
    eval, evalq, get, intersect, is.unsorted, lapply, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, rank, rbind,
    rep.int, rownames, sapply, setdiff, sort, table, tapply, union,
    unique, unlist, unsplit

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: BiocStyle
Loading required package: plyr
Loading required package: fdrtool
Loading required package: rmeta
Loading required package: grid
Loading required package: limma

Attaching package: ‘limma’

The following object is masked from ‘package:BiocGenerics’:

    plotMA

Loading required package: s4vd
Loading required package: biclust
Loading required package: MASS
Loading required package: colorspace
Loading required package: lattice
Loading required package: sva
Loading required package: mgcv
Loading required package: nlme
This is mgcv 1.8-6. For overview type 'help("mgcv-package")'.
Loading required package: genefilter

Attaching package: ‘genefilter’

The following object is masked from ‘package:MASS’:

    area

The following object is masked from ‘package:base’:

    anyNA

Loading required package: matrixStats
matrixStats v0.14.0 (2015-02-13) successfully loaded. See ?matrixStats for help.

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:genefilter’:

    rowSds, rowVars

The following object is masked from ‘package:plyr’:

    count

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

Loading required package: igraph
Loading required package: RColorBrewer
Loading required package: proxy

Attaching package: ‘proxy’

The following objects are masked from ‘package:stats’:

    as.dist, dist

The following object is masked from ‘package:base’:

    as.matrix

Loading required package: cluster
Warning: replacing previous import by ‘matrixStats::anyMissing’ when loading ‘Coincide’
Warning: replacing previous import by ‘matrixStats::rowMedians’ when loading ‘Coincide’
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CDF_CoINcIDE")
> ### * CDF_CoINcIDE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CDF_CoINcIDE
> ### Title: TEST
> ### Aliases: CDF_CoINcIDE
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("CoINcIDE-package")
> ### * CoINcIDE-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Coincide-package
> ### Title: \packageTitleCoincide
> ### Aliases: Coincide-package Coincide
> ### Keywords: package
> 
> ### ** Examples
> 
> cat("this is an example")
this is an example> 
> 
> 
> cleanEx()
> nameEx("ConsensusClusterPlus_CoINcIDE")
> ### * ConsensusClusterPlus_CoINcIDE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ConsensusClusterPlus_CoINcIDE
> ### Title: TEST
> ### Aliases: ConsensusClusterPlus_CoINcIDE
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("GSEA")
> ### * GSEA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GSEA
> ### Title: TEST
> ### Aliases: GSEA
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("addClinicalVarToNodeAttributes")
> ### * addClinicalVarToNodeAttributes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addClinicalVarToNodeAttributes
> ### Title: TEST
> ### Aliases: addClinicalVarToNodeAttributes
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("advancedNetworkPlots")
> ### * advancedNetworkPlots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: advancedNetworkPlots
> ### Title: TEST
> ### Aliases: advancedNetworkPlots
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> cleanEx()
> nameEx("assignCentroidSubtype")
> ### * assignCentroidSubtype
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: assignCentroidSubtype
> ### Title: TEST
> ### Aliases: assignCentroidSubtype
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("assignFinalEdges")
> ### * assignFinalEdges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: assignFinalEdges
> ### Title: TEST
> ### Aliases: assignFinalEdges
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("batchNormalization")
> ### * batchNormalization
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: batchNormalization
> ### Title: TEST
> ### Aliases: batchNormalization
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("binarizeMetaclustStudyStatus")
> ### * binarizeMetaclustStudyStatus
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binarizeMetaclustStudyStatus
> ### Title: TEST
> ### Aliases: binarizeMetaclustStudyStatus
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("clustMatrixListWrapper")
> ### * clustMatrixListWrapper
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clustMatrixListWrapper
> ### Title: TEST
> ### Aliases: clustMatrixListWrapper
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("collapseDupProbes")
> ### * collapseDupProbes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: collapseDupProbes
> ### Title: Collapse/handle duplicated probes (genes) in a dataset
> ### Aliases: collapseDupProbes
> 
> ### ** Examples
> 
> library("curatedBreastData")
Loading required package: XML

Attaching package: ‘curatedBreastData’

The following objects are masked from ‘package:Coincide’:

    collapseDupProbes, createS4exprSet, filterAndImputeSamples,
    filterGenesByVariance

> #load up our datasets
> data(curatedBreastDataExprSetList);
> 
> #just perform on second dataset, GSE2034, as an example.
> #This dataset has no NAs already but does have duplicated genes
> #highestVariance calculation make take a minute to run.
> collapsedData <- collapseDupProbes(expr=exprs(curatedBreastDataExprSetList[[2]]),  
+ keys=curatedBreastDataExprSetList[[2]]@featureData$gene_symbol, 
+ method = c("highestVariance"), debug = TRUE, removeNA_keys = TRUE, 
+ varMetric = c("everything"))
Warning in collapseDupProbes(expr = exprs(curatedBreastDataExprSetList[[2]]),  :
  It's best to impute NA values before running this function
otherwise it may set averages to NA if there is 1 NA present.
This function just removes any genes whose key is NA.
Warning in collapseDupProbes(expr = exprs(curatedBreastDataExprSetList[[2]]),  :
  
You may get a warning here because key names are duplicated 
  so it can't use them as row names. That's OK.

> #look at names of outputs
> names(collapsedData)
[1] "expr" "keys"
> 
> 
> 
> 
> cleanEx()

detaching ‘package:curatedBreastData’, ‘package:XML’

> nameEx("computeAdjMatrices")
> ### * computeAdjMatrices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: computeAdjMatrices
> ### Title: TEST
> ### Aliases: computeAdjMatrices
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("computeAdjMatricesNullMatrixList")
> ### * computeAdjMatricesNullMatrixList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: computeAdjMatricesNullMatrixList
> ### Title: TEST
> ### Aliases: computeAdjMatricesNullMatrixList
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("computeMetaclustEffectSizes")
> ### * computeMetaclustEffectSizes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: computeMetaclustEffectSizes
> ### Title: TEST
> ### Aliases: computeMetaclustEffectSizes
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("createExpressionSetList")
> ### * createExpressionSetList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createExpressionSetList
> ### Title: TEST
> ### Aliases: createExpressionSetList
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("createNullDataMatrixList")
> ### * createNullDataMatrixList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createNullDataMatrixList
> ### Title: TEST
> ### Aliases: createNullDataMatrixList
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("createPhenoMasterTableFromMatrixList")
> ### * createPhenoMasterTableFromMatrixList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createPhenoMasterTableFromMatrixList
> ### Title: TEST
> ### Aliases: createPhenoMasterTableFromMatrixList
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("createS4exprSet")
> ### * createS4exprSet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createS4exprSet
> ### Title: TEST
> ### Aliases: createS4exprSet
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("createTissueSimDatasets")
> ### * createTissueSimDatasets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createTissueSimDatasets
> ### Title: TEST
> ### Aliases: createTissueSimDatasets
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("exprSetListToMatrixList")
> ### * exprSetListToMatrixList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: exprSetListToMatrixList
> ### Title: TEST
> ### Aliases: exprSetListToMatrixList
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("filterAndImputeSamples")
> ### * filterAndImputeSamples
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filterAndImputeSamples
> ### Title: Filter and Impute Samples
> ### Aliases: filterAndImputeSamples
> 
> ### ** Examples
> 
> library("curatedBreastData")
Loading required package: XML

Attaching package: ‘curatedBreastData’

The following objects are masked from ‘package:Coincide’:

    collapseDupProbes, createS4exprSet, filterAndImputeSamples,
    filterGenesByVariance

> #load up our datasets
> data(curatedBreastDataExprSetList);
> 
> #just perform on one dataset as an example, GSE9893. This dataset does have NA values.
> #highestVariance calculation make take a minute to run.
> #create study list object. 
> study <- list(expr=exprs(curatedBreastDataExprSetList[[5]]),
+ keys=curatedBreastDataExprSetList[[2]]@featureData$gene_symbol,
+ phenoData=pData(curatedBreastDataExprSetList[[5]]))
> 
> filteredStudy <- filterAndImputeSamples(study, studyName = "study", 
+ outputFile = "createTestTrainSetsOutput.txt", impute = TRUE, 
+ knnFractionSize = 0.01, fractionSampleNAcutoff = 0.005, 
+ fractionGeneNAcutoff = 0.01, exprIndex = "expr", classIndex="phenoData",
+ sampleCol = TRUE, returnErrorRate = TRUE)
Warning in filterAndImputeSamples(study, studyName = "study", outputFile = "createTestTrainSetsOutput.txt",  :
  
Just a warning: this function assumes your missing values
  are proper NAs, not "null",etc.

Cluster size 22898 broken into 7597 15301 
Cluster size 7597 broken into 1303 6294 
Done cluster 1303 
Cluster size 6294 broken into 2904 3390 
Cluster size 2904 broken into 1773 1131 
Cluster size 1773 broken into 1372 401 
Done cluster 1372 
Done cluster 401 
Done cluster 1773 
Done cluster 1131 
Done cluster 2904 
Cluster size 3390 broken into 1993 1397 
Cluster size 1993 broken into 977 1016 
Done cluster 977 
Done cluster 1016 
Done cluster 1993 
Done cluster 1397 
Done cluster 3390 
Done cluster 6294 
Done cluster 7597 
Cluster size 15301 broken into 6374 8927 
Cluster size 6374 broken into 4092 2282 
Cluster size 4092 broken into 1948 2144 
Cluster size 1948 broken into 951 997 
Done cluster 951 
Done cluster 997 
Done cluster 1948 
Cluster size 2144 broken into 979 1165 
Done cluster 979 
Done cluster 1165 
Done cluster 2144 
Done cluster 4092 
Cluster size 2282 broken into 613 1669 
Done cluster 613 
Cluster size 1669 broken into 780 889 
Done cluster 780 
Done cluster 889 
Done cluster 1669 
Done cluster 2282 
Done cluster 6374 
Cluster size 8927 broken into 6446 2481 
Cluster size 6446 broken into 3049 3397 
Cluster size 3049 broken into 1504 1545 
Cluster size 1504 broken into 1080 424 
Done cluster 1080 
Done cluster 424 
Done cluster 1504 
Cluster size 1545 broken into 899 646 
Done cluster 899 
Done cluster 646 
Done cluster 1545 
Done cluster 3049 
Cluster size 3397 broken into 1179 2218 
Done cluster 1179 
Cluster size 2218 broken into 1764 454 
Cluster size 1764 broken into 1009 755 
Done cluster 1009 
Done cluster 755 
Done cluster 1764 
Done cluster 454 
Done cluster 2218 
Done cluster 3397 
Done cluster 6446 
Cluster size 2481 broken into 1695 786 
Cluster size 1695 broken into 960 735 
Done cluster 960 
Done cluster 735 
Done cluster 1695 
Done cluster 786 
Done cluster 2481 
Done cluster 8927 
Done cluster 15301 
Cluster size 22895 broken into 7694 15201 
Cluster size 7694 broken into 1681 6013 
Cluster size 1681 broken into 547 1134 
Done cluster 547 
Done cluster 1134 
Done cluster 1681 
Cluster size 6013 broken into 2938 3075 
Cluster size 2938 broken into 1263 1675 
Done cluster 1263 
Cluster size 1675 broken into 1321 354 
Done cluster 1321 
Done cluster 354 
Done cluster 1675 
Done cluster 2938 
Cluster size 3075 broken into 1852 1223 
Cluster size 1852 broken into 920 932 
Done cluster 920 
Done cluster 932 
Done cluster 1852 
Done cluster 1223 
Done cluster 3075 
Done cluster 6013 
Done cluster 7694 
Cluster size 15201 broken into 4625 10576 
Cluster size 4625 broken into 2347 2278 
Cluster size 2347 broken into 1692 655 
Cluster size 1692 broken into 716 976 
Done cluster 716 
Done cluster 976 
Done cluster 1692 
Done cluster 655 
Done cluster 2347 
Cluster size 2278 broken into 559 1719 
Done cluster 559 
Cluster size 1719 broken into 642 1077 
Done cluster 642 
Done cluster 1077 
Done cluster 1719 
Done cluster 2278 
Done cluster 4625 
Cluster size 10576 broken into 6676 3900 
Cluster size 6676 broken into 3345 3331 
Cluster size 3345 broken into 1163 2182 
Done cluster 1163 
Cluster size 2182 broken into 1328 854 
Done cluster 1328 
Done cluster 854 
Done cluster 2182 
Done cluster 3345 
Cluster size 3331 broken into 1219 2112 
Done cluster 1219 
Cluster size 2112 broken into 1897 215 
Cluster size 1897 broken into 1425 472 
Done cluster 1425 
Done cluster 472 
Done cluster 1897 
Done cluster 215 
Done cluster 2112 
Done cluster 3331 
Done cluster 6676 
Cluster size 3900 broken into 2244 1656 
Cluster size 2244 broken into 1152 1092 
Done cluster 1152 
Done cluster 1092 
Done cluster 2244 
Cluster size 1656 broken into 993 663 
Done cluster 993 
Done cluster 663 
Done cluster 1656 
Done cluster 3900 
Done cluster 10576 
Done cluster 15201 
> 
> #see output list names 
> names(filteredStudy)
[1] "expr"             "exprFilterImpute" "class"            "classesFilter"   
[5] "keysFilterImpute" "keys"             "meanAbsDiff"      "errorRate"       
> #what is the imputation error fraction (rate)?
> filteredStudy$errorRate
[1] 0.1136878
> 
> 
> 
> 
> cleanEx()

detaching ‘package:curatedBreastData’, ‘package:XML’

> nameEx("filterGenesByVariance")
> ### * filterGenesByVariance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filterGenesByVariance
> ### Title: Filter genes by variance
> ### Aliases: filterGenesByVariance
> 
> ### ** Examples
> 
> library("curatedBreastData")
Loading required package: XML

Attaching package: ‘curatedBreastData’

The following objects are masked from ‘package:Coincide’:

    collapseDupProbes, createS4exprSet, filterAndImputeSamples,
    filterGenesByVariance

> #load up our datasets
> data(curatedBreastDataExprSetList);
> 
> #just perform on one dataset as an example, GSE1379. 
> #This dataset does not have NA values, which makes for a
> #good example without extra pre-processing.
> #highestVariance calculation make take a minute to run.
> #create study list object. 
> study <- list(expr=exprs(curatedBreastDataExprSetList[[1]]),
+ keys=curatedBreastDataExprSetList[[1]]@featureData$gene_symbol)
> #take top 100 varying genes
> 
> filterGeneStudy <- filterGenesByVariance(study, exprIndex = "expr", 
+ keysIndex = "keys", outputFile = "./varCal.txt", 
+ plotVarianceHist = FALSE,
+ varMetric = c("everything"), sampleCol = TRUE, numTopVarGenes=100)
> 
> #names of output
> names(filterGeneStudy)
[1] "study"         "filteredStudy" "p"            
> 
> 
> 
> cleanEx()

detaching ‘package:curatedBreastData’, ‘package:XML’

> nameEx("findCommunities")
> ### * findCommunities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findCommunities
> ### Title: TEST
> ### Aliases: findCommunities
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("globalFDR")
> ### * globalFDR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: globalFDR
> ### Title: TEST
> ### Aliases: globalFDR
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("global_FDR")
> ### * global_FDR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: global_FDR
> ### Title: TEST
> ### Aliases: global_FDR
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("meanMetricDensityPlot")
> ### * meanMetricDensityPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meanMetricDensityPlot
> ### Title: TEST
> ### Aliases: meanMetricDensityPlot
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("mergeDatasetList")
> ### * mergeDatasetList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mergeDatasetList
> ### Title: TEST
> ### Aliases: mergeDatasetList
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("merge_datasetList")
> ### * merge_datasetList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: merge_datasetList
> ### Title: TEST
> ### Aliases: merge_datasetList
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("procExprSet")
> ### * procExprSet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: procExprSet
> ### Title: Post-process a normalized assayData in an ExpressionSet object
> ### Aliases: procExprSet
> 
> ### ** Examples
> 
> library("curatedBreastData")
Loading required package: XML

Attaching package: ‘curatedBreastData’

The following objects are masked from ‘package:Coincide’:

    collapseDupProbes, createS4exprSet, filterAndImputeSamples,
    filterGenesByVariance

> #load up our datasets
> data(curatedBreastDataExprSetList);
> 
> #just perform on one dataset as an example, GSE9893. 
> #This dataset does have NA values, so
> #you'll see the impute.knn progress printed to the screen.
> #also take only genes that fall in 
> #the variance percentiles between .75 and 1 
> #(i.e. top 75th percentile genes by variance.)
> 
> post_procExprSet <- processExpressionSet(exprSet=
+ curatedBreastDataExprSetList[[5]], 
+ outputFileDirectory = "./",
+ minVarPercentile=.75, maxVarPercentile = 1)
Warning in filterAndImputeSamples(study, studyName = "study", outputFile = paste0(outputFileDirectory,  :
  
Just a warning: this function assumes your missing values
  are proper NAs, not "null",etc.

Cluster size 22898 broken into 7597 15301 
Cluster size 7597 broken into 1303 6294 
Done cluster 1303 
Cluster size 6294 broken into 2904 3390 
Cluster size 2904 broken into 1773 1131 
Cluster size 1773 broken into 1372 401 
Done cluster 1372 
Done cluster 401 
Done cluster 1773 
Done cluster 1131 
Done cluster 2904 
Cluster size 3390 broken into 1993 1397 
Cluster size 1993 broken into 977 1016 
Done cluster 977 
Done cluster 1016 
Done cluster 1993 
Done cluster 1397 
Done cluster 3390 
Done cluster 6294 
Done cluster 7597 
Cluster size 15301 broken into 6374 8927 
Cluster size 6374 broken into 4092 2282 
Cluster size 4092 broken into 1948 2144 
Cluster size 1948 broken into 951 997 
Done cluster 951 
Done cluster 997 
Done cluster 1948 
Cluster size 2144 broken into 979 1165 
Done cluster 979 
Done cluster 1165 
Done cluster 2144 
Done cluster 4092 
Cluster size 2282 broken into 613 1669 
Done cluster 613 
Cluster size 1669 broken into 780 889 
Done cluster 780 
Done cluster 889 
Done cluster 1669 
Done cluster 2282 
Done cluster 6374 
Cluster size 8927 broken into 6446 2481 
Cluster size 6446 broken into 3049 3397 
Cluster size 3049 broken into 1504 1545 
Cluster size 1504 broken into 1080 424 
Done cluster 1080 
Done cluster 424 
Done cluster 1504 
Cluster size 1545 broken into 899 646 
Done cluster 899 
Done cluster 646 
Done cluster 1545 
Done cluster 3049 
Cluster size 3397 broken into 1179 2218 
Done cluster 1179 
Cluster size 2218 broken into 1764 454 
Cluster size 1764 broken into 1009 755 
Done cluster 1009 
Done cluster 755 
Done cluster 1764 
Done cluster 454 
Done cluster 2218 
Done cluster 3397 
Done cluster 6446 
Cluster size 2481 broken into 1695 786 
Cluster size 1695 broken into 960 735 
Done cluster 960 
Done cluster 735 
Done cluster 1695 
Done cluster 786 
Done cluster 2481 
Done cluster 8927 
Done cluster 15301 
Warning in collapseDupProbes(expr = exprSet@assayData$exprs, sampleColNames = colnames(exprSet@assayData$exprs),  :
  It's best to impute NA values before running this function
otherwise it may set averages to NA if there is 1 NA present.
This function just removes any genes whose key is NA.
Warning in collapseDupProbes(expr = exprSet@assayData$exprs, sampleColNames = colnames(exprSet@assayData$exprs),  :
  
You may get a warning here because key names are duplicated 
  so it can't use them as row names. That's OK.


Starting with  155patients.
found no multiple samples from the same patient(s)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:curatedBreastData’, ‘package:XML’

> nameEx("procExprSetList")
> ### * procExprSetList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: procExprSetList
> ### Title: Process a list of S4 expressionSet objects.
> ### Aliases: procExprSetList procExpressionSetList
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library("curatedBreastData")
> ##D #warning: takes a while to run! you're processing all datasets in the package!
> ##D #load up our datasets
> ##D data(curatedBreastDataExprSetList);
> ##D 
> ##D #just take top 5000 genes by variance
> ##D #this will post-process every dataset in the package
> ##D #to make them ready for downstream analyses.
> ##D proc_curatedBreastDataExprSetList <- processExpressionSetList(
> ##D exprSetList=curatedBreastDataExprSetList, 
> ##D outputFileDirectory = "./", numTopVarGenes=5000)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("removeDupPatients")
> ### * removeDupPatients
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removeDupPatients
> ### Title: Remove duplicated patient samples (samples from the same
> ###   patient/column ID)
> ### Aliases: removeDupPatients
> 
> ### ** Examples
> 
> library("curatedBreastData")
Loading required package: XML

Attaching package: ‘curatedBreastData’

The following objects are masked from ‘package:Coincide’:

    collapseDupProbes, createS4exprSet, filterAndImputeSamples,
    filterGenesByVariance

> #No curatedBreastData has duplicated samples, 
> #but we can still run this function on one of the datasets:
> #load up our datasets
> data(curatedBreastDataExprSetList);
